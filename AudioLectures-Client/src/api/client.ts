//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class ApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */

    login(body: LoginModel | undefined): Promise<{ token: string }> {
        let url_ = this.baseUrl + "/api/Auth/login";
        url_ = url_.replace(/[?&]$/, "");
    
        const content_ = JSON.stringify(body);
    
        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };
    
        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }
    protected async processLogin(response: Response): Promise<{ token: string }> {
        const status = response.status;
        let _headers: any = {};
    
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        }
    
        if (status === 200) {
            const _responseText = await response.text();
            return _responseText ? JSON.parse(_responseText) : { token: "" };
        } else {
            const _responseText = await response.text();
            throw new Error(`Login failed: ${_responseText}`);
        }
    }
    
//מקורי    
    // login(body: LoginModel | undefined): Promise<void> {
    //     let url_ = this.baseUrl + "/api/Auth/login";
    //     url_ = url_.replace(/[?&]$/, "");

    //     const content_ = JSON.stringify(body);

    //     let options_: RequestInit = {
    //         body: content_,
    //         method: "POST",
    //         headers: {
    //             "Content-Type": "application/json",
    //         }
    //     };

    //     return this.http.fetch(url_, options_).then((_response: Response) => {
    //         return this.processLogin(_response);
    //     });
    // }

    // protected processLogin(response: Response): Promise<void> {
    //     const status = response.status;
    //     let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    //     if (status === 200) {
    //         return response.text().then((_responseText) => {
    //         return;
    //         });
    //     } else if (status !== 200 && status !== 204) {
    //         return response.text().then((_responseText) => {
    //         return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    //         });
    //     }
    //     return Promise.resolve<void>(null as any);
    // }

    /**
     * @param body (optional) 
     * @return OK
     */
    register(body: RegisterModel | undefined): Promise<{ token: string }> {
        let url_ = this.baseUrl + "/api/Auth/register";
        url_ = url_.replace(/[?&]$/, "");
    
        const content_ = JSON.stringify(body);
    
        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };
    
        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegister(_response);
        });
    }
    protected async processRegister(response: Response): Promise<{ token: string }> {
        const status = response.status;
        let _headers: any = {};
    
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        }
    
        if (status === 200) {
            const _responseText = await response.text();
            return _responseText ? JSON.parse(_responseText) : { token: "" };
        } else {
            const _responseText = await response.text();
            throw new Error(`Registration failed: ${_responseText}`);
        }
    }
        
    //רגיסטר מקורי
    // register(body: RegisterModel | undefined): Promise<void> {
    //     let url_ = this.baseUrl + "/api/Auth/register";
    //     url_ = url_.replace(/[?&]$/, "");

    //     const content_ = JSON.stringify(body);

    //     let options_: RequestInit = {
    //         body: content_,
    //         method: "POST",
    //         headers: {
    //             "Content-Type": "application/json",
    //         }
    //     };

    //     return this.http.fetch(url_, options_).then((_response: Response) => {
    //         return this.processRegister(_response);
    //     });
    // }

    // protected processRegister(response: Response): Promise<void> {
    //     const status = response.status;
    //     let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    //     if (status === 200) {
    //         return response.text().then((_responseText) => {
    //         return;
    //         });
    //     } else if (status !== 200 && status !== 204) {
    //         return response.text().then((_responseText) => {
    //         return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    //         });
    //     }
    //     return Promise.resolve<void>(null as any);
    // }

    /**
     * @return OK
     */
    lecturerAll(): Promise<Lecturer[]> {
        let url_ = this.baseUrl + "/api/Lecturer";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLecturerAll(_response);
        });
    }

    protected processLecturerAll(response: Response): Promise<Lecturer[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Lecturer.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Lecturer[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    lecturerPOST(body: LecturerDTO | undefined): Promise<Lecturer> {
        let url_ = this.baseUrl + "/api/Lecturer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLecturerPOST(_response);
        });
    }

    protected processLecturerPOST(response: Response): Promise<Lecturer> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Lecturer.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Lecturer>(null as any);
    }

    /**
     * @return OK
     */
    id(lecturerId: number): Promise<Lecturer> {
        let url_ = this.baseUrl + "/api/Lecturer/id/{LecturerId}";
        if (lecturerId === undefined || lecturerId === null)
            throw new Error("The parameter 'lecturerId' must be defined.");
        url_ = url_.replace("{LecturerId}", encodeURIComponent("" + lecturerId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processId(_response);
        });
    }

    protected processId(response: Response): Promise<Lecturer> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Lecturer.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Lecturer>(null as any);
    }

    /**
     * @return OK
     */
    name(lecturerName: string): Promise<Lecturer[]> {
        let url_ = this.baseUrl + "/api/Lecturer/name/{LecturerName}";
        if (lecturerName === undefined || lecturerName === null)
            throw new Error("The parameter 'lecturerName' must be defined.");
        url_ = url_.replace("{LecturerName}", encodeURIComponent("" + lecturerName));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processName(_response);
        });
    }

    protected processName(response: Response): Promise<Lecturer[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Lecturer.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Lecturer[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    lecturerPUT(lecturerId: number, body: LecturerDTO | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Lecturer/{LecturerId}";
        if (lecturerId === undefined || lecturerId === null)
            throw new Error("The parameter 'lecturerId' must be defined.");
        url_ = url_.replace("{LecturerId}", encodeURIComponent("" + lecturerId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLecturerPUT(_response);
        });
    }

    protected processLecturerPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    lecturerDELETE(lecturerId: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Lecturer/{LecturerId}";
        if (lecturerId === undefined || lecturerId === null)
            throw new Error("The parameter 'lecturerId' must be defined.");
        url_ = url_.replace("{LecturerId}", encodeURIComponent("" + lecturerId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLecturerDELETE(_response);
        });
    }

    protected processLecturerDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    lessonAll(): Promise<Lesson[]> {
        let url_ = this.baseUrl + "/api/Lesson";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLessonAll(_response);
        });
    }

    protected processLessonAll(response: Response): Promise<Lesson[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Lesson.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Lesson[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    lessonPOST(body: LessonDTO | undefined): Promise<Lesson> {
        let url_ = this.baseUrl + "/api/Lesson";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLessonPOST(_response);
        });
    }

    protected processLessonPOST(response: Response): Promise<Lesson> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Lesson.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Lesson>(null as any);
    }

    /**
     * @return OK
     */
    title(): Promise<string[]> {
        let url_ = this.baseUrl + "/api/Lesson/title";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTitle(_response);
        });
    }

    protected processTitle(response: Response): Promise<string[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string[]>(null as any);
    }

    /**
     * @return OK
     */
    id2(id: number): Promise<Lesson> {
        let url_ = this.baseUrl + "/api/Lesson/id/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processId2(_response);
        });
    }

    protected processId2(response: Response): Promise<Lesson> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Lesson.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Lesson>(null as any);
    }

    /**
     * @return OK
     */
    title2(title: string): Promise<Lesson[]> {
        let url_ = this.baseUrl + "/api/Lesson/title/{title}";
        if (title === undefined || title === null)
            throw new Error("The parameter 'title' must be defined.");
        url_ = url_.replace("{title}", encodeURIComponent("" + title));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTitle2(_response);
        });
    }

    protected processTitle2(response: Response): Promise<Lesson[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Lesson.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Lesson[]>(null as any);
    }

    /**
     * @return OK
     */
    name2(name: string): Promise<Lesson[]> {
        let url_ = this.baseUrl + "/api/Lesson/name/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processName2(_response);
        });
    }

    protected processName2(response: Response): Promise<Lesson[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Lesson.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Lesson[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    lessonPUT(id: number, body: LessonDTO | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Lesson/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLessonPUT(_response);
        });
    }

    protected processLessonPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    lessonDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Lesson/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLessonDELETE(_response);
        });
    }

    protected processLessonDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param file (optional) 
     * @return OK
     */
    upload(file: FileParameter | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/S3/upload";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file === null || file === undefined)
            throw new Error("The parameter 'file' cannot be null.");
        else
            content_.append("file", file.data, file.fileName ? file.fileName : "file");

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpload(_response);
        });
    }

    protected processUpload(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    // download(fileName: string): Promise<void> {
    //     let url_ = this.baseUrl + "/api/S3/download/{fileName}";
    //     if (fileName === undefined || fileName === null)
    //         throw new Error("The parameter 'fileName' must be defined.");
    //     url_ = url_.replace("{fileName}", encodeURIComponent("" + fileName));
    //     url_ = url_.replace(/[?&]$/, "");

    //     let options_: RequestInit = {
    //         method: "GET",
    //         headers: {
    //         }
    //     };

    //     return this.http.fetch(url_, options_).then((_response: Response) => {
    //         return this.processDownload(_response);
    //     });
    // }
    // protected processDownload(response: Response): Promise<void> {
    //     const status = response.status;
    //     let _headers: any = {};
    //     if (response.headers && response.headers.forEach) {
    //         response.headers.forEach((v: any, k: any) => _headers[k] = v);
    //     }
    
    //     if (status === 200) {
    //         return response.blob().then((blob: Blob) => {
    //             // יצירת לינק להורדה
    //             const url = window.URL.createObjectURL(blob);
    //             const link = document.createElement('a');
    //             link.href = url;
    //             link.download = response.headers.get('content-disposition')?.split('filename=')[1] || 'downloaded_file'; // השתמש בשם הקובץ מהכותרת או שם ברירת מחדל
    //             link.click();
    //             window.URL.revokeObjectURL(url);  // נקה את ה-URL אחרי השימוש
    //             return;
    //         });
    //     } else if (status !== 200 && status !== 204) {
    //         return response.text().then((_responseText) => {
    //             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    //         });
    //     }
    
    //     return Promise.resolve<void>(null as any);
    // }
    download(fileName: string): Promise<Response> {
        let url_ = this.baseUrl + "/api/S3/download/{fileName}";
        if (fileName === undefined || fileName === null)
            throw new Error("The parameter 'fileName' must be defined.");
        url_ = url_.replace("{fileName}", encodeURIComponent("" + fileName));
        url_ = url_.replace(/[?&]$/, "");
    
        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };
    
        return this.http.fetch(url_, options_);  // מחזיר את ה-Response ולא עושה את ה-Blob כאן
    }
    protected processDownload(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        }
    
        if (status === 200) {
            return response.blob().then((blob: Blob) => {
                // יצירת לינק להורדה
                const url = window.URL.createObjectURL(blob);
                const link = document.createElement('a');
                link.href = url;
                link.download = response.headers.get('content-disposition')?.split('filename=')[1] || 'downloaded_file'; // השתמש בשם הקובץ מהכותרת או שם ברירת מחדל
                link.click();
                window.URL.revokeObjectURL(url);  // נקה את ה-URL אחרי השימוש
                return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
    
        return Promise.resolve<void>(null as any);
    }
        


    ///מקורי
    // protected processDownload(response: Response): Promise<void> {
    //     const status = response.status;
    //     let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    //     if (status === 200) {
    //         return response.text().then((_responseText) => {
    //         return;
    //         });
    //     } else if (status !== 200 && status !== 204) {
    //         return response.text().then((_responseText) => {
    //         return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    //         });
    //     }
    //     return Promise.resolve<void>(null as any);
    // }

    async files(): Promise<string[]> {
        const url_ = this.baseUrl + "/api/S3/files";
    
        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };
    
        const response = await this.http.fetch(url_, options_);
        return this.processFiles(response);
    }
    
    protected async processFiles(response: Response): Promise<string[]> {
        const status = response.status;
        let _headers: any = {};
        response.headers.forEach((v: any, k: any) => _headers[k] = v);
    
        if (status === 200) {
            return response.json(); // מחזיר ישירות רשימה של סטרינגים
        } else {
            const _responseText = await response.text();
            throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
    
        return [];
    }
        /**
     * @return OK
     */
    // files(): Promise<void> {
    //     let url_ = this.baseUrl + "/api/S3/files";
    //     url_ = url_.replace(/[?&]$/, "");

    //     let options_: RequestInit = {
    //         method: "GET",
    //         headers: {
    //         }
    //     };

    //     return this.http.fetch(url_, options_).then((_response: Response) => {
    //         return this.processFiles(_response);
    //     });
    // }

    // protected processFiles(response: Response): Promise<void> {
    //     const status = response.status;
    //     let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    //     if (status === 200) {
    //         return response.text().then((_responseText) => {
    //         return;
    //         });
    //     } else if (status !== 200 && status !== 204) {
    //         return response.text().then((_responseText) => {
    //         return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    //         });
    //     }
    //     return Promise.resolve<void>(null as any);
    // }

    /**
     * @return OK
     */
    delete(fileName: string): Promise<void> {
        let url_ = this.baseUrl + "/api/S3/delete/{fileName}";
        if (fileName === undefined || fileName === null)
            throw new Error("The parameter 'fileName' must be defined.");
        url_ = url_.replace("{fileName}", encodeURIComponent("" + fileName));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    userAll(): Promise<User[]> {
        let url_ = this.baseUrl + "/api/User";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUserAll(_response);
        });
    }

    protected processUserAll(response: Response): Promise<User[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(User.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<User[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    userPOST(body: UserDTO | undefined): Promise<User> {
        let url_ = this.baseUrl + "/api/User";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUserPOST(_response);
        });
    }

    protected processUserPOST(response: Response): Promise<User> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = User.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<User>(null as any);
    }

    /**
     * @return OK
     */
    userGET(id: number): Promise<User> {
        let url_ = this.baseUrl + "/api/User/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUserGET(_response);
        });
    }

    protected processUserGET(response: Response): Promise<User> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = User.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<User>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    userPUT(id: number, body: UserDTO | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/User/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUserPUT(_response);
        });
    }

    protected processUserPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    userDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/User/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUserDELETE(_response);
        });
    }

    protected processUserDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class Lecturer implements ILecturer {
    lecturerId?: number;
    lecturerName?: string | undefined;
    lecturerLessons?: Lesson[] | undefined;

    constructor(data?: ILecturer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lecturerId = _data["lecturerId"];
            this.lecturerName = _data["lecturerName"];
            if (Array.isArray(_data["lecturerLessons"])) {
                this.lecturerLessons = [] as any;
                for (let item of _data["lecturerLessons"])
                    this.lecturerLessons!.push(Lesson.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Lecturer {
        data = typeof data === 'object' ? data : {};
        let result = new Lecturer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lecturerId"] = this.lecturerId;
        data["lecturerName"] = this.lecturerName;
        if (Array.isArray(this.lecturerLessons)) {
            data["lecturerLessons"] = [];
            for (let item of this.lecturerLessons)
                data["lecturerLessons"].push(item.toJSON());
        }
        return data;
    }
}

export interface ILecturer {
    lecturerId?: number;
    lecturerName?: string | undefined;
    lecturerLessons?: Lesson[] | undefined;
}

export class LecturerDTO implements ILecturerDTO {
    lecturerName?: string | undefined;

    constructor(data?: ILecturerDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lecturerName = _data["lecturerName"];
        }
    }

    static fromJS(data: any): LecturerDTO {
        data = typeof data === 'object' ? data : {};
        let result = new LecturerDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lecturerName"] = this.lecturerName;
        return data;
    }
}

export interface ILecturerDTO {
    lecturerName?: string | undefined;
}

export class Lesson implements ILesson {
    lessonId?: number;
    lessonName?: string | undefined;
    lessonTitle?: string | undefined;
    lessonDuration?: string;
    lessonReleaseDate?: Date;
    lessonListenersCount?: number;
    lessonDownloadCount?: number;
    lessonUrl?: string | undefined;
    lessonLecturerId?: number;
    lessonLecturer?: Lecturer;
    lessonUsers?: User[] | undefined;

    constructor(data?: ILesson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lessonId = _data["lessonId"];
            this.lessonName = _data["lessonName"];
            this.lessonTitle = _data["lessonTitle"];
            this.lessonDuration = _data["lessonDuration"];
            this.lessonReleaseDate = _data["lessonReleaseDate"] ? new Date(_data["lessonReleaseDate"].toString()) : <any>undefined;
            this.lessonListenersCount = _data["lessonListenersCount"];
            this.lessonDownloadCount = _data["lessonDownloadCount"];
            this.lessonUrl = _data["lessonUrl"];
            this.lessonLecturerId = _data["lessonLecturerId"];
            this.lessonLecturer = _data["lessonLecturer"] ? Lecturer.fromJS(_data["lessonLecturer"]) : <any>undefined;
            if (Array.isArray(_data["lessonUsers"])) {
                this.lessonUsers = [] as any;
                for (let item of _data["lessonUsers"])
                    this.lessonUsers!.push(User.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Lesson {
        data = typeof data === 'object' ? data : {};
        let result = new Lesson();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lessonId"] = this.lessonId;
        data["lessonName"] = this.lessonName;
        data["lessonTitle"] = this.lessonTitle;
        data["lessonDuration"] = this.lessonDuration;
        data["lessonReleaseDate"] = this.lessonReleaseDate ? this.lessonReleaseDate.toISOString() : <any>undefined;
        data["lessonListenersCount"] = this.lessonListenersCount;
        data["lessonDownloadCount"] = this.lessonDownloadCount;
        data["lessonUrl"] = this.lessonUrl;
        data["lessonLecturerId"] = this.lessonLecturerId;
        data["lessonLecturer"] = this.lessonLecturer ? this.lessonLecturer.toJSON() : <any>undefined;
        if (Array.isArray(this.lessonUsers)) {
            data["lessonUsers"] = [];
            for (let item of this.lessonUsers)
                data["lessonUsers"].push(item.toJSON());
        }
        return data;
    }
}

export interface ILesson {
    lessonId?: number;
    lessonName?: string | undefined;
    lessonTitle?: string | undefined;
    lessonDuration?: string;
    lessonReleaseDate?: Date;
    lessonListenersCount?: number;
    lessonDownloadCount?: number;
    lessonUrl?: string | undefined;
    lessonLecturerId?: number;
    lessonLecturer?: Lecturer;
    lessonUsers?: User[] | undefined;
}

export class LessonDTO implements ILessonDTO {
    lessonName?: string | undefined;
    lessonTitle?: string | undefined;
    lessonDuration?: string;
    lessonRealeaseDate?: Date;
    lessonUrl?: string | undefined;
    lessonLecturerId?: number;

    constructor(data?: ILessonDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lessonName = _data["lessonName"];
            this.lessonTitle = _data["lessonTitle"];
            this.lessonDuration = _data["lessonDuration"];
            this.lessonRealeaseDate = _data["lessonRealeaseDate"] ? new Date(_data["lessonRealeaseDate"].toString()) : <any>undefined;
            this.lessonUrl = _data["lessonUrl"];
            this.lessonLecturerId = _data["lessonLecturerId"];
        }
    }

    static fromJS(data: any): LessonDTO {
        data = typeof data === 'object' ? data : {};
        let result = new LessonDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lessonName"] = this.lessonName;
        data["lessonTitle"] = this.lessonTitle;
        data["lessonDuration"] = this.lessonDuration;
        data["lessonRealeaseDate"] = this.lessonRealeaseDate ? this.lessonRealeaseDate.toISOString() : <any>undefined;
        data["lessonUrl"] = this.lessonUrl;
        data["lessonLecturerId"] = this.lessonLecturerId;
        return data;
    }
}

export interface ILessonDTO {
    lessonName?: string | undefined;
    lessonTitle?: string | undefined;
    lessonDuration?: string;
    lessonRealeaseDate?: Date;
    lessonUrl?: string | undefined;
    lessonLecturerId?: number;
}

export class LoginModel implements ILoginModel {
    userName?: string | undefined;
    userPassword?: string | undefined;

    constructor(data?: ILoginModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.userPassword = _data["userPassword"];
        }
    }

    static fromJS(data: any): LoginModel {
        data = typeof data === 'object' ? data : {};
        let result = new LoginModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["userPassword"] = this.userPassword;
        return data;
    }
}

export interface ILoginModel {
    userName?: string | undefined;
    userPassword?: string | undefined;
}

export class RegisterModel implements IRegisterModel {
    userName?: string | undefined;
    userPassword?: string | undefined;
    userEmail?: string | undefined;

    constructor(data?: IRegisterModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.userPassword = _data["userPassword"];
            this.userEmail = _data["userEmail"];
        }
    }

    static fromJS(data: any): RegisterModel {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["userPassword"] = this.userPassword;
        data["userEmail"] = this.userEmail;
        return data;
    }
}

export interface IRegisterModel {
    userName?: string | undefined;
    userPassword?: string | undefined;
    userEmail?: string | undefined;
}

export class User implements IUser {
    userId?: number;
    userName?: string | undefined;
    userEmail?: string | undefined;
    userPassword?: string | undefined;
    userRole?: string | undefined;
    userLessons?: Lesson[] | undefined;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.userName = _data["userName"];
            this.userEmail = _data["userEmail"];
            this.userPassword = _data["userPassword"];
            this.userRole = _data["userRole"];
            if (Array.isArray(_data["userLessons"])) {
                this.userLessons = [] as any;
                for (let item of _data["userLessons"])
                    this.userLessons!.push(Lesson.fromJS(item));
            }
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["userName"] = this.userName;
        data["userEmail"] = this.userEmail;
        data["userPassword"] = this.userPassword;
        data["userRole"] = this.userRole;
        if (Array.isArray(this.userLessons)) {
            data["userLessons"] = [];
            for (let item of this.userLessons)
                data["userLessons"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUser {
    userId?: number;
    userName?: string | undefined;
    userEmail?: string | undefined;
    userPassword?: string | undefined;
    userRole?: string | undefined;
    userLessons?: Lesson[] | undefined;
}

export class UserDTO implements IUserDTO {
    userName?: string | undefined;
    userEmail?: string | undefined;
    userPassword?: string | undefined;
    userRole?: string | undefined;

    constructor(data?: IUserDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.userEmail = _data["userEmail"];
            this.userPassword = _data["userPassword"];
            this.userRole = _data["userRole"];
        }
    }

    static fromJS(data: any): UserDTO {
        data = typeof data === 'object' ? data : {};
        let result = new UserDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["userEmail"] = this.userEmail;
        data["userPassword"] = this.userPassword;
        data["userRole"] = this.userRole;
        return data;
    }
}

export interface IUserDTO {
    userName?: string | undefined;
    userEmail?: string | undefined;
    userPassword?: string | undefined;
    userRole?: string | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}